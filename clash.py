# -*- coding: utf-8 -*-

import logging
import requests
import urllib.parse # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è URL-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ö–æ—Ç—è –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters


# !!! –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram !!!
TELEGRAM_BOT_TOKEN = "7835804770:AAFya70UvrONYGySq5VSaAgvjQVFOI4LreI"

# !!! –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω API Clash Royale !!!
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ IP-–∞–¥—Ä–µ—Å—É, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –±–æ—Ç–∞.
CLASH_ROYALE_API_TOKEN = "eaf342dz" # –ù–∞–ø—Ä–∏–º–µ—Ä: "eaf342dz"

# –ë–∞–∑–æ–≤—ã–π URL API Clash Royale
CLASH_ROYALE_API_URL = "https://api.clashroyale.com/v1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# –£–º–µ–Ω—å—à–∞–µ–º —à—É–º –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests, –∏—Å–ø–æ–ª—å–∑—É—è –µ—ë –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# logging.getLogger("httpx").setLevel(logging.WARNING) # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ requests 2.28.1 –∏–ª–∏ –Ω–æ–≤–µ–µ, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç httpx
# –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π requests –∏–ª–∏ –æ–±—â–µ–≥–æ —Å–ª—É—á–∞—è:
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Clash Royale
API_HEADERS = {
    "Authorization": "Bearer {}".format(CLASH_ROYALE_API_TOKEN)
}

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ Clash Royale.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /player <—Ç–µ–≥_–∏–≥—Ä–æ–∫–∞>\n"
        "–ü—Ä–∏–º–µ—Ä: /player #ABCD123"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    await update.message.reply_text(
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/player <—Ç–µ–≥_–∏–≥—Ä–æ–∫–∞>\n"
        "–ü—Ä–∏–º–µ—Ä: /player #ABCD123"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /player
async def player_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ —Ç–µ–≥—É."""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /player
    args = context.args

    if not args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–≥ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /player.\n"
            "–ü—Ä–∏–º–µ—Ä: /player #ABCD123"
        )
        return

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Ç–µ–≥ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω —Ä–∞–∑–¥–µ–ª–µ–Ω –ø—Ä–æ–±–µ–ª–∞–º–∏)
    player_tag = "".join(args)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å # (–¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
    if not player_tag.startswith("#"):
        player_tag = "#" + player_tag

    # URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
    # –¢–µ–≥ –Ω—É–∂–Ω–æ URL-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å. –°–∏–º–≤–æ–ª '#' —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ %23.
    # –û—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ç–µ–≥–∞ (–ø–æ—Å–ª–µ #) —Ç–æ–∂–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
    encoded_tag_part = urllib.parse.quote(player_tag[1:])
    player_url = "{}/players/%23{}".format(CLASH_ROYALE_API_URL, encoded_tag_part)


    logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞: {}".format(player_tag)) # –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ .format()

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ API Clash Royale
        response = requests.get(player_url, headers=API_HEADERS)
        response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–æ—Ö–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–≤–µ—Ç–∞ (4xx –∏–ª–∏ 5xx)

        player_data = response.json()

        # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ .format() –≤–º–µ—Å—Ç–æ f-—Å—Ç—Ä–æ–∫
        name = player_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        tag = player_data.get("tag", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        trophies = player_data.get("trophies", 0)
        best_trophies = player_data.get("bestTrophies", 0)
        level = player_data.get("expLevel", 1)
        arena = player_data.get("arena", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        total_donations = player_data.get("totalDonations", 0)
        wins = player_data.get("wins", 0)
        losses = player_data.get("losses", 0)
        battles = wins + losses
        win_rate = (wins / battles * 100) if battles > 0 else 0

        clan_info = player_data.get("clan")
        clan_name = clan_info.get("name", "–ù–µ—Ç –∫–ª–∞–Ω–∞") if clan_info else "–ù–µ—Ç –∫–ª–∞–Ω–∞"

        reply_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:**\n"
            "üë§ –ò–º—è: {}\n"
            "üè∑Ô∏è –¢–µ–≥: `{}`\n"
            "üèÜ –ö—É–±–∫–∏: {} (–†–µ–∫–æ—Ä–¥: {})\n"
            "üëë –£—Ä–æ–≤–µ–Ω—å: {}\n"
            "üèüÔ∏è –ê—Ä–µ–Ω–∞: {}\n"
            "‚öîÔ∏è –ë–æ–µ–≤ —Å—ã–≥—Ä–∞–Ω–æ: {}\n"
            "‚úÖ –ü–æ–±–µ–¥: {}\n"
            "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {}\n"
            "üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {:.2f}%\n" # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –≤–Ω—É—Ç—Ä–∏ format
            "ü§ù –í—Å–µ–≥–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–Ω–∏–π: {}\n"
            "üè† –ö–ª–∞–Ω: {}".format(
                name,
                tag,
                trophies,
                best_trophies,
                level,
                arena,
                battles,
                wins,
                losses,
                win_rate,
                total_donations,
                clan_name
            )
        )


        await update.message.reply_text(reply_text, parse_mode="Markdown")

    except requests.exceptions.HTTPError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 404 Not Found, 403 Forbidden)
        status_code = response.status_code if 'response' in locals() else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        if status_code == 404:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ —Å —Ç–µ–≥–æ–º `{}` –Ω–µ –Ω–∞–π–¥–µ–Ω.".format(player_tag)) # –ò –∑–¥–µ—Å—å .format()
        elif status_code == 403:
             await update.message.reply_text(
                 "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω ({}). ".format(status_code) +
                 "–í–æ–∑–º–æ–∂–Ω–æ, IP-–∞–¥—Ä–µ—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –±–æ—Ç–∞, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–æ–∫–µ–Ω—É –Ω–∞ —Å–∞–π—Ç–µ Supercell Developer."
             )
        elif status_code == 429:
             await update.message.reply_text(
                 "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ({}).".format(status_code)
             )
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API ({}): {}".format(status_code, e))
        logger.error("HTTP –æ—à–∏–±–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {}: {}".format(player_tag, e)) # –ò –∑–¥–µ—Å—å .format()

    except requests.exceptions.RequestException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {}".format(e)) # –ò –∑–¥–µ—Å—å .format()
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {}: {}".format(player_tag, e)) # –ò –∑–¥–µ—Å—å .format()

    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {}".format(e)) # –ò –∑–¥–µ—Å—å .format()
        logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {}: {}".format(player_tag, e)) # –ò –∑–¥–µ—Å—å .format()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("player", player_stats_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(poll_interval=3) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

# –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
if __name__ == "__main__":
    main()
